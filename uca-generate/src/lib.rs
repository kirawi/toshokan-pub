include!(concat!(env!("OUT_DIR"), "/table.rs")); // generated by build.rs

pub mod parser;
use parser::CollateElement;

pub fn derive_weight(cp: u32) -> Vec<CollateElement> {
    let primary = match cp {
        0x3400..=0x4DBF | 0x20000..=0x2A6DF | 0x2A700..=0x2EE5D | 0x30000..=0x323AF => {
            0xFB80 + (cp >> 15)
        } // CJK2
        0x4E00..=0x9FFF | 0xF900..=0xFAFF => 0xFB40 + (cp >> 15), // CJK1
        0x17000..=0x18AFF | 0x18D00..=0x18D8F => 0xFB00,          // Tangut
        0x18B00..=0x18CFF => 0xFB02,                              // Khitan
        0x1B170..=0x1B2FF => 0xFB01,                              // Nushu
        _ => 0xFBC0 + (cp >> 15),                                 // unass.
    };
    let secondary = match cp {
        0x17000..=0x18AFF | 0x18D00..=0x18D8F => cp - 0x17000, // Tangut
        0x18B00..=0x18CFF => cp - 0x18B00,                     // Khitan
        0x1B170..=0x1B2FF => cp - 0x1B170,                     // Nushu
        _ => cp & 0x7FFF,                                      // CJK1, CJK2, unass.
    } | 0x8000;
    vec![[primary as u16, 0x0020, 0x0002], [secondary as u16, 0, 0]]
}

pub fn lookup(s: &[u32]) -> Option<Vec<CollateElement>> {
    ENTRIES
        .binary_search_by(|entry| (*entry.0).cmp(s))
        .ok()
        .map(|idx| ENTRIES[idx].1.iter().map(|ce| *ce).collect())
        .or_else(|| {
            if s.len() == 1 {
                Some(derive_weight(s[0]))
            } else {
                None
            }
        })
}
